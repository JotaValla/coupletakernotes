package com.jimmy.valladares.notecoupletaker.service

import android.service.notification.NotificationListenerService
import android.service.notification.StatusBarNotification
import android.util.Log
import com.jimmy.valladares.notecoupletaker.data.repository.NotificationRepository
import com.jimmy.valladares.notecoupletaker.domain.model.CapturedNotification
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.SupervisorJob
import kotlinx.coroutines.job
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await

/**
 * Servicio que escucha y captura todas las notificaciones que llegan al dispositivo.
 * Este servicio hereda de NotificationListenerService y se encarga de interceptar
 * las notificaciones para guardarlas en Firestore.
 */
class NotificationCaptureService : NotificationListenerService() {

    companion object {
        private const val TAG = "NotificationCapture"
        
        // Paquetes que queremos ignorar para evitar spam en los logs y en Firestore
        private val IGNORED_PACKAGES = setOf(
            "android", // Notificaciones del sistema
            "com.android.systemui", // UI del sistema
            "com.jimmy.valladares.notecoupletaker" // Nuestra propia app
        )
    }
    
    // Repositorio para guardar notificaciones en Firestore
    private val notificationRepository = NotificationRepository()
    
    // CoroutineScope para operaciones as√≠ncronas
    // Usamos SupervisorJob para que si falla una operaci√≥n, no cancele las dem√°s
    private val serviceScope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    /**
     * Se llama cuando el servicio se conecta exitosamente al sistema de notificaciones
     */
    override fun onListenerConnected() {
        super.onListenerConnected()
        Log.d(TAG, "‚úÖ NotificationCaptureService conectado exitosamente")
        Log.d(TAG, "üî• Firebase inicializado: ${com.google.firebase.FirebaseApp.getInstance() != null}")
        Log.d(TAG, "üì° El servicio est√° listo para capturar notificaciones y guardarlas en Firestore")
        
        // Test de conectividad con Firestore
        serviceScope.launch {
            try {
                val testDoc = mapOf("test" to "connection", "timestamp" to com.google.firebase.firestore.FieldValue.serverTimestamp())
                notificationRepository.firestore.collection("connection_test").add(testDoc).await()
                Log.d(TAG, "üéØ Test de conexi√≥n a Firestore: EXITOSO")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå Test de conexi√≥n a Firestore: FALLIDO", e)
            }
        }
    }

    /**
     * Se llama cuando el servicio se desconecta del sistema de notificaciones
     */
    override fun onListenerDisconnected() {
        super.onListenerDisconnected()
        Log.d(TAG, "‚ùå NotificationCaptureService desconectado")
        Log.w(TAG, "El servicio ya no puede capturar notificaciones")
    }

    /**
     * Se llama cuando el servicio es destruido
     */
    override fun onDestroy() {
        super.onDestroy()
        // Cancelar todas las operaciones pendientes
        serviceScope.coroutineContext.job.cancel()
        Log.d(TAG, "üõë NotificationCaptureService destruido")
    }

    /**
     * M√©todo principal: se ejecuta cada vez que llega una nueva notificaci√≥n al dispositivo
     * @param sbn StatusBarNotification que contiene toda la informaci√≥n de la notificaci√≥n
     */
    override fun onNotificationPosted(sbn: StatusBarNotification) {
        super.onNotificationPosted(sbn)
        
        try {
            // Extraer informaci√≥n b√°sica de la notificaci√≥n
            val packageName = sbn.packageName
            
            // Filtrar notificaciones que no nos interesan
            if (shouldIgnoreNotification(packageName)) {
                Log.v(TAG, "üîá Ignorando notificaci√≥n de: $packageName")
                return
            }
            
            val postTime = sbn.postTime
            val notification = sbn.notification
            
            // Extraer el t√≠tulo y texto de la notificaci√≥n
            val extras = notification.extras
            val title = extras.getCharSequence("android.title")?.toString()
            val text = extras.getCharSequence("android.text")?.toString()
            val bigText = extras.getCharSequence("android.bigText")?.toString()
            val subText = extras.getCharSequence("android.subText")?.toString()
            
            // Usar bigText si est√° disponible, si no usar text normal
            val finalText = bigText ?: text
            
            // Crear objeto para guardar en Firestore
            val capturedNotification = CapturedNotification(
                packageName = packageName,
                title = title,
                text = finalText
                // timestamp se establece autom√°ticamente con @ServerTimestamp
            )
            
            Log.d(TAG, "üöÄ Iniciando guardado en Firestore...")
            
            // Guardar en Firestore de forma as√≠ncrona
            serviceScope.launch {
                try {
                    notificationRepository.saveNotification(capturedNotification)
                    Log.d(TAG, "üíæ Notificaci√≥n guardada en Firestore: $packageName")
                } catch (e: Exception) {
                    Log.e(TAG, "‚ùå Error al guardar notificaci√≥n en Firestore", e)
                    Log.e(TAG, "üîç Package: $packageName, Title: $title")
                }
            }
            
            // Obtener informaci√≥n adicional √∫til para los logs
            val appName = getAppName(packageName)
            val category = notification.category ?: "Sin categor√≠a"
            val priority = notification.priority
            val isOngoing = notification.flags and android.app.Notification.FLAG_ONGOING_EVENT != 0
            val isClearable = notification.flags and android.app.Notification.FLAG_NO_CLEAR == 0
            
            // Log detallado de la notificaci√≥n capturada
            Log.d(TAG, "üì± ===== NUEVA NOTIFICACI√ìN CAPTURADA =====")
            Log.d(TAG, "üì¶ Paquete: $packageName")
            Log.d(TAG, "üéØ App: $appName")
            Log.d(TAG, "üïê Hora: ${java.util.Date(postTime)}")
            Log.d(TAG, "üìã T√≠tulo: ${title ?: "Sin t√≠tulo"}")
            Log.d(TAG, "üìù Texto: ${finalText ?: "Sin texto"}")
            if (subText != null) Log.d(TAG, "üìÑ Subtexto: $subText")
            Log.d(TAG, "üè∑Ô∏è Categor√≠a: $category")
            Log.d(TAG, "‚ö° Prioridad: $priority")
            Log.d(TAG, "üîÑ Permanente: $isOngoing")
            Log.d(TAG, "üóëÔ∏è Eliminable: $isClearable")
            Log.d(TAG, "üÜî ID: ${sbn.id}")
            Log.d(TAG, "üè∑Ô∏è Tag: ${sbn.tag ?: "Sin tag"}")
            Log.d(TAG, "üíæ Guardada en Firestore: ‚úÖ")
            Log.d(TAG, "============================================")
            
            // Log compacto para f√°cil lectura
            Log.i(TAG, "üì® [$appName] ${title ?: "Sin t√≠tulo"} - ${finalText ?: "Sin texto"}")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error al procesar notificaci√≥n", e)
        }
    }

    /**
     * Se llama cuando una notificaci√≥n es removida/descartada por el usuario o por el sistema
     * @param sbn StatusBarNotification de la notificaci√≥n que fue removida
     */
    override fun onNotificationRemoved(sbn: StatusBarNotification) {
        super.onNotificationRemoved(sbn)
        
        try {
            val packageName = sbn.packageName
            val title = sbn.notification.extras.getCharSequence("android.title")?.toString() ?: "Sin t√≠tulo"
            
            Log.d(TAG, "üóëÔ∏è Notificaci√≥n removida de $packageName: $title")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå Error al procesar notificaci√≥n removida", e)
        }
    }

    /**
     * Determina si una notificaci√≥n debe ser ignorada bas√°ndose en el paquete
     * @param packageName Nombre del paquete de la aplicaci√≥n que envi√≥ la notificaci√≥n
     * @return true si la notificaci√≥n debe ser ignorada, false en caso contrario
     */
    private fun shouldIgnoreNotification(packageName: String): Boolean {
        return IGNORED_PACKAGES.any { ignoredPackage ->
            packageName.startsWith(ignoredPackage)
        }
    }

    /**
     * Intenta obtener el nombre legible de la aplicaci√≥n desde el package name
     * @param packageName Nombre del paquete
     * @return Nombre de la aplicaci√≥n o el package name si no se puede obtener
     */
    private fun getAppName(packageName: String): String {
        return try {
            val applicationInfo = packageManager.getApplicationInfo(packageName, 0)
            packageManager.getApplicationLabel(applicationInfo).toString()
        } catch (e: Exception) {
            packageName // Fallback al package name si no se puede obtener el nombre
        }
    }
}